
* Rails scaffolding is generated by passing the scaffold command to the rails generate script. The argument of the scaffold command
  is the singular version of the resource name, together with optional parameters for the data model's attributes
    $ rails generate scaffold User name:string email:string

* Scaffolding automatically creates code to model data and interact with it through the web. It is good for getting started quickly
  but bad for understanding

* Rails automatically includes id for use as the primary key in the database

* Rails 5: $ rails db:migrate updates the database with the changes we've made. Before Rails 5 the command was $rake db:migrate

* MVC:
  1. The browser issues a request for the /users URL
  2. Rails routes /users to the index action in the Users controller
  3. The index action asks the User model to retrieve all users (User.all)
  4. The User model pulls all the users from the database
  5. The User model returns the list of users to the controller
  6. The controller captures the users in the @users variable, which is passed to the index view
  7. The view uses embedded Ruby to render the page as HTML
  8. The controller passes the HTML back to the browser

* A controller contains a collection of related actions

* The index, show, new and edit actions all correspond to pages. The create, update and destroy actions don't typically
  render pages, their main purpose is to modify information in the database

* REST is an architectural style for developing distributed, networked systems and software apps. In the context of Rails
  apps REST means that most application components are modeled as resources that can be created, read, updated and deleted -
  operations that correspond both to the CRUD operations of relational databases and to the four fundamental HTTP request
  methods post, get, patch and delete.

* As interpreted by Rails, the REST architecture includes a standard set of URLs and controller actions for interacting
  with data models

* Active Record is a Rails library

* Instance variables are automatically available in the views

* In Rails, validations are used to implement constraints on the values of data model attributes

* Rails comes with built-in functions for defining associations between different data models (e.g.has_many, belongs_to)

* The $ rails console command allows us to interact with our Rails application

* Controllers like the users controller inherit from the Application controller, the Application controller inherits
  from ActionController::Base which is the base class for controllers provided by the Rails library Action Pack
